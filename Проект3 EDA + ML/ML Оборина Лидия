{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "EDA и первая модель ML\n",
    "Цель проекта - Сформулировать предположения для построения модели. Проверить качество данных и очистить их. Определиться с параметрами модели. Получить метрику Mean Absolute Error (MAE), которая показывает среднее отклонение предсказанных значений от фактических."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('main_task.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Информация о признаках\n",
    "Restaurant_id — идентификационный номер ресторана / сети ресторанов;\n",
    "City — город, в котором находится ресторан;\n",
    "Cuisine Style — кухня или кухни, к которым можно отнести блюда, предлагаемые в ресторане;\n",
    "Ranking — место, которое занимает данный ресторан среди всех ресторанов своего города;\n",
    "Rating — рейтинг ресторана по данным TripAdvisor (именно это значение должна будет предсказывать модель);\n",
    "Price Range — диапазон цен в ресторане;\n",
    "Number of Reviews — количество отзывов о ресторане;\n",
    "Reviews — данные о двух отзывах, которые отображаются на сайте ресторана;\n",
    "URL_TA — URL страницы ресторана на TripAdvisor;\n",
    "ID_TA — идентификатор ресторана в базе данных TripAdvisor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>City</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>25343</td>\n",
       "      <td>id_2145</td>\n",
       "      <td>Rome</td>\n",
       "      <td>['Italian', 'Pizza', 'Pub', 'Gastropub']</td>\n",
       "      <td>2146.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>89.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187791-d9782878-Reviews-Pi...</td>\n",
       "      <td>d9782878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32372</td>\n",
       "      <td>id_3313</td>\n",
       "      <td>Prague</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3320.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>[['Sports bar', 'Hidden Gem'], ['11/11/2014', ...</td>\n",
       "      <td>/Restaurant_Review-g274707-d4597143-Reviews-Ho...</td>\n",
       "      <td>d4597143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>id_1418</td>\n",
       "      <td>Oporto</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1419.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[['There are better 3 star hotel bars', 'Amazi...</td>\n",
       "      <td>/Restaurant_Review-g189180-d12503536-Reviews-D...</td>\n",
       "      <td>d12503536</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Restaurant_id    City                             Cuisine Style  \\\n",
       "25343       id_2145    Rome  ['Italian', 'Pizza', 'Pub', 'Gastropub']   \n",
       "32372       id_3313  Prague                                       NaN   \n",
       "5           id_1418  Oporto                                       NaN   \n",
       "\n",
       "       Ranking  Rating Price Range  Number of Reviews  \\\n",
       "25343   2146.0     4.5    $$ - $$$               89.0   \n",
       "32372   3320.0     4.0         NaN                9.0   \n",
       "5       1419.0     3.0         NaN                2.0   \n",
       "\n",
       "                                                 Reviews  \\\n",
       "25343                                           [[], []]   \n",
       "32372  [['Sports bar', 'Hidden Gem'], ['11/11/2014', ...   \n",
       "5      [['There are better 3 star hotel bars', 'Amazi...   \n",
       "\n",
       "                                                  URL_TA      ID_TA  \n",
       "25343  /Restaurant_Review-g187791-d9782878-Reviews-Pi...   d9782878  \n",
       "32372  /Restaurant_Review-g274707-d4597143-Reviews-Ho...   d4597143  \n",
       "5      /Restaurant_Review-g189180-d12503536-Reviews-D...  d12503536  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Просматриваем данные\n",
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Переименуем столбцы\n",
    "# df.rename(columns={'Restaurant_id': 'restaurant_id','City': 'city','Cuisine Style': 'cuisine_style','Ranking': 'ranking', 'Rating': 'rating','Price Range': 'price_range','Number of Reviews': 'nor','Reviews': 'reviews','URL_TA': 'url_ta','ID_TA': 'id_ta'}, inplace=True)\n",
    "df.columns=['restaurant_id','city','cuisine_style','ranking','rating','price_range','nor','reviews','url_ta','id_ta']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>restaurant_id</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine_style</th>\n",
       "      <th>ranking</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_range</th>\n",
       "      <th>nor</th>\n",
       "      <th>reviews</th>\n",
       "      <th>url_ta</th>\n",
       "      <th>id_ta</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>22735</td>\n",
       "      <td>id_2892</td>\n",
       "      <td>Barcelona</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2893.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>[['Great, charming unpretentious gem!', 'Sophi...</td>\n",
       "      <td>/Restaurant_Review-g187497-d12998670-Reviews-P...</td>\n",
       "      <td>d12998670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34367</td>\n",
       "      <td>id_4792</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>['Peruvian', 'South American']</td>\n",
       "      <td>4795.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187514-d10751196-Reviews-E...</td>\n",
       "      <td>d10751196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27582</td>\n",
       "      <td>id_5705</td>\n",
       "      <td>London</td>\n",
       "      <td>['Lebanese', 'Mediterranean', 'Middle Eastern'...</td>\n",
       "      <td>5714.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>98.0</td>\n",
       "      <td>[['Delicious and not overpriced for location',...</td>\n",
       "      <td>/Restaurant_Review-g186338-d1386572-Reviews-By...</td>\n",
       "      <td>d1386572</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      restaurant_id       city  \\\n",
       "22735       id_2892  Barcelona   \n",
       "34367       id_4792     Madrid   \n",
       "27582       id_5705     London   \n",
       "\n",
       "                                           cuisine_style  ranking  rating  \\\n",
       "22735                                                NaN   2893.0     4.5   \n",
       "34367                     ['Peruvian', 'South American']   4795.0     4.5   \n",
       "27582  ['Lebanese', 'Mediterranean', 'Middle Eastern'...   5714.0     4.0   \n",
       "\n",
       "      price_range   nor                                            reviews  \\\n",
       "22735         NaN  10.0  [['Great, charming unpretentious gem!', 'Sophi...   \n",
       "34367         NaN   3.0                                           [[], []]   \n",
       "27582    $$ - $$$  98.0  [['Delicious and not overpriced for location',...   \n",
       "\n",
       "                                                  url_ta      id_ta  \n",
       "22735  /Restaurant_Review-g187497-d12998670-Reviews-P...  d12998670  \n",
       "34367  /Restaurant_Review-g187514-d10751196-Reviews-E...  d10751196  \n",
       "27582  /Restaurant_Review-g186338-d1386572-Reviews-By...   d1386572  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# смотрим на данные после переименования столбцов\n",
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$$ - $$$    18412\n",
      "$            6279\n",
      "$$$$         1423\n",
      "Name: price_range, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# смотрим на количество уникальных значений по столбцу, \n",
    "# определяем сколько ресторанов относятся к среднему ценовому сегменту\n",
    "print(df['price_range'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18412"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# определяем сколько ресторанов относятся к среднему ценовому сегменту\n",
    "df[df.price_range =='$$ - $$$'].restaurant_id.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# посчитаем сколько городов в наборе данных\n",
    "df['city'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125\n"
     ]
    }
   ],
   "source": [
    "# Сколько типов кухонь представлено в наборе данных? Создаем список и заменяем пропуски\n",
    "def make_list(n_str):\n",
    "    n_str = n_str.replace('[','')\n",
    "    n_str = n_str.replace(']','')\n",
    "    n_list = n_str.split(', ')\n",
    "    return list(n_list)\n",
    "\n",
    "df['cuisine_style'] = df['cuisine_style'].fillna('none')\n",
    "df['cuisine_style'] = df['cuisine_style'].apply(make_list)\n",
    "\n",
    "cs_list = []\n",
    "\n",
    "for i in range(0, len(df['cuisine_style'])):\n",
    "    \n",
    "    one_list = df['cuisine_style'][i] \n",
    "    \n",
    "    for elem in one_list:             \n",
    "        if elem not in cs_list and elem != 'none':\n",
    "            cs_list.append(elem)\n",
    "            \n",
    "print(len(cs_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(\"'Vegetarian Friendly'\", 11189)]\n"
     ]
    }
   ],
   "source": [
    "# какая кухня самая популярная?\n",
    "cs_liste = []\n",
    "\n",
    "for i in range (0, len(df['cuisine_style'])):\n",
    "    one_list = list(df['cuisine_style'][i])\n",
    "    for elem in one_list:\n",
    "        if elem != 'none':\n",
    "            cs_liste.append(elem)\n",
    "\n",
    "import collections\n",
    "c = collections.Counter()\n",
    "\n",
    "for word in cs_liste:\n",
    "    c[word] += 1\n",
    "    \n",
    "print(c.most_common(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6224\n"
     ]
    }
   ],
   "source": [
    "# определяем среднее значение количества кухонь в ресторанах и создаем дополнительный признак\n",
    "def cnt_kitchen(n_list):\n",
    "    cnt = 0\n",
    "    for elem in n_list:\n",
    "        if elem != 'none':\n",
    "            cnt += 1\n",
    "        else:\n",
    "            cnt = 1\n",
    "    return cnt\n",
    "\n",
    "df['cnt_kitchen'] = df['cuisine_style'].apply(cnt_kitchen)\n",
    "\n",
    "print(df['cnt_kitchen'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        3\n",
      "1        1\n",
      "2        7\n",
      "3        1\n",
      "4        3\n",
      "        ..\n",
      "39995    4\n",
      "39996    5\n",
      "39997    2\n",
      "39998    5\n",
      "39999    1\n",
      "Name: cnt_kitchen, Length: 40000, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# выодим дополнительный признак - количество кухонь в ресторане\n",
    "print(df['cnt_kitchen'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2004-04-21 00:00:00\n",
      "2018-02-26 00:00:00\n"
     ]
    }
   ],
   "source": [
    "# определяем когда был оставлен самый свежий отзыв\n",
    "import re\n",
    "date_comment = df['reviews'][0]\n",
    "\n",
    "def search_date(n_str):\n",
    "    found_date = re.findall('\\d{2}\\/\\d{2}\\/\\d{4}', n_str)\n",
    "    if len(found_date) == 0:\n",
    "        found_date = 'no_date'\n",
    "    return found_date\n",
    "\n",
    "df['reviews_date'] = df['reviews'].apply(search_date)\n",
    "\n",
    "len_rev = len(df['reviews_date'])\n",
    "\n",
    "cs_list = []\n",
    "\n",
    "for i in range (0, len_rev):\n",
    "    one_list = df['reviews_date'][i]\n",
    "    for elem in one_list:\n",
    "        if elem not in 'no_date':\n",
    "            cs_list.append(pd.to_datetime(elem, format='%m/%d/%Y'))\n",
    "\n",
    "# pd.to_datetime(df['date_time_column'], format='%m/%d/%Y')\n",
    "\n",
    "print(min(cs_list))\n",
    "print(max(cs_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3207 days 00:00:00\n"
     ]
    }
   ],
   "source": [
    "# какое максимальное количество дней отделяет даты публикации отзывов, размещённых на сайте ресторана?\n",
    "cs_list = []\n",
    "\n",
    "for i in range (0, len_rev):\n",
    "    one_list = df['reviews_date'][i]\n",
    "    if len(one_list) == 2:\n",
    "        f_date = pd.to_datetime(one_list[0], format='%m/%d/%Y')\n",
    "        s_date = pd.to_datetime(one_list[1], format='%m/%d/%Y')\n",
    "        cs_list.append(f_date - s_date)\n",
    "\n",
    "print(max(cs_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        2\n",
      "1        0\n",
      "2        3\n",
      "3        0\n",
      "4        2\n",
      "        ..\n",
      "39995    2\n",
      "39996    2\n",
      "39997    0\n",
      "39998    2\n",
      "39999    2\n",
      "Name: price_range, Length: 40000, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# создаём дополнительный признак об уровне цен, а также заменяем пропуски\n",
    "def range_value(n_str):\n",
    "    if n_str == 0:\n",
    "        res = 0\n",
    "    elif n_str == '$':\n",
    "        res = 1\n",
    "    elif n_str == '$$ - $$$':\n",
    "        res = 2\n",
    "    else:\n",
    "        res = 3\n",
    "    return res\n",
    "\n",
    "df['price_range'] = df['price_range'].fillna(0)\n",
    "df['price_range'] = df['price_range'].apply(range_value)\n",
    "\n",
    "print(df['price_range'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>restaurant_id</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine_style</th>\n",
       "      <th>ranking</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_range</th>\n",
       "      <th>nor</th>\n",
       "      <th>reviews</th>\n",
       "      <th>url_ta</th>\n",
       "      <th>id_ta</th>\n",
       "      <th>cnt_kitchen</th>\n",
       "      <th>reviews_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>id_5569</td>\n",
       "      <td>Paris</td>\n",
       "      <td>['European', 'French', 'International']</td>\n",
       "      <td>5570.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "      <td>194.0</td>\n",
       "      <td>[['Good food at your doorstep', 'A good hotel ...</td>\n",
       "      <td>/Restaurant_Review-g187147-d1912643-Reviews-R_...</td>\n",
       "      <td>d1912643</td>\n",
       "      <td>3</td>\n",
       "      <td>[12/31/2017, 11/20/2017]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>id_1535</td>\n",
       "      <td>Stockholm</td>\n",
       "      <td>[none]</td>\n",
       "      <td>1537.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>[['Unique cuisine', 'Delicious Nepalese food']...</td>\n",
       "      <td>/Restaurant_Review-g189852-d7992032-Reviews-Bu...</td>\n",
       "      <td>d7992032</td>\n",
       "      <td>1</td>\n",
       "      <td>[07/06/2017, 06/19/2016]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>id_352</td>\n",
       "      <td>London</td>\n",
       "      <td>['Japanese', 'Sushi', 'Asian', 'Grill', 'Veget...</td>\n",
       "      <td>353.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "      <td>688.0</td>\n",
       "      <td>[['Catch up with friends', 'Not exceptional'],...</td>\n",
       "      <td>/Restaurant_Review-g186338-d8632781-Reviews-RO...</td>\n",
       "      <td>d8632781</td>\n",
       "      <td>7</td>\n",
       "      <td>[01/08/2018, 01/06/2018]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>id_3456</td>\n",
       "      <td>Berlin</td>\n",
       "      <td>[none]</td>\n",
       "      <td>3458.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187323-d1358776-Reviews-Es...</td>\n",
       "      <td>d1358776</td>\n",
       "      <td>1</td>\n",
       "      <td>no_date</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>id_615</td>\n",
       "      <td>Munich</td>\n",
       "      <td>['German', 'Central European', 'Vegetarian Fri...</td>\n",
       "      <td>621.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>84.0</td>\n",
       "      <td>[['Best place to try a Bavarian food', 'Nice b...</td>\n",
       "      <td>/Restaurant_Review-g187309-d6864963-Reviews-Au...</td>\n",
       "      <td>d6864963</td>\n",
       "      <td>3</td>\n",
       "      <td>[11/18/2017, 02/19/2017]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39995</td>\n",
       "      <td>id_499</td>\n",
       "      <td>Milan</td>\n",
       "      <td>['Italian', 'Vegetarian Friendly', 'Vegan Opti...</td>\n",
       "      <td>500.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "      <td>79.0</td>\n",
       "      <td>[['The real Italian experience!', 'Wonderful f...</td>\n",
       "      <td>/Restaurant_Review-g187849-d2104414-Reviews-Ro...</td>\n",
       "      <td>d2104414</td>\n",
       "      <td>4</td>\n",
       "      <td>[12/16/2017, 11/12/2017]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39996</td>\n",
       "      <td>id_6340</td>\n",
       "      <td>Paris</td>\n",
       "      <td>['French', 'American', 'Bar', 'European', 'Veg...</td>\n",
       "      <td>6341.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "      <td>542.0</td>\n",
       "      <td>[['Parisian atmosphere', 'Bit pricey but inter...</td>\n",
       "      <td>/Restaurant_Review-g187147-d1800036-Reviews-La...</td>\n",
       "      <td>d1800036</td>\n",
       "      <td>5</td>\n",
       "      <td>[12/21/2017, 12/12/2017]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39997</td>\n",
       "      <td>id_1649</td>\n",
       "      <td>Stockholm</td>\n",
       "      <td>['Japanese', 'Sushi']</td>\n",
       "      <td>1652.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[['Good by swedish standards', 'A hidden jewel...</td>\n",
       "      <td>/Restaurant_Review-g189852-d947615-Reviews-Sus...</td>\n",
       "      <td>d947615</td>\n",
       "      <td>2</td>\n",
       "      <td>[11/03/2016, 04/12/2008]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39998</td>\n",
       "      <td>id_640</td>\n",
       "      <td>Warsaw</td>\n",
       "      <td>['Polish', 'European', 'Eastern European', 'Ce...</td>\n",
       "      <td>641.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[['Underground restaurant', 'Oldest Restaurant...</td>\n",
       "      <td>/Restaurant_Review-g274856-d1100838-Reviews-Ho...</td>\n",
       "      <td>d1100838</td>\n",
       "      <td>5</td>\n",
       "      <td>[07/11/2017, 06/18/2017]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39999</td>\n",
       "      <td>id_4824</td>\n",
       "      <td>Milan</td>\n",
       "      <td>['Spanish']</td>\n",
       "      <td>4827.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>260.0</td>\n",
       "      <td>[['Average', 'Nice an informal'], ['01/31/2016...</td>\n",
       "      <td>/Restaurant_Review-g187849-d1109020-Reviews-Ta...</td>\n",
       "      <td>d1109020</td>\n",
       "      <td>1</td>\n",
       "      <td>[01/31/2016, 07/04/2012]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40000 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      restaurant_id       city  \\\n",
       "0           id_5569      Paris   \n",
       "1           id_1535  Stockholm   \n",
       "2            id_352     London   \n",
       "3           id_3456     Berlin   \n",
       "4            id_615     Munich   \n",
       "...             ...        ...   \n",
       "39995        id_499      Milan   \n",
       "39996       id_6340      Paris   \n",
       "39997       id_1649  Stockholm   \n",
       "39998        id_640     Warsaw   \n",
       "39999       id_4824      Milan   \n",
       "\n",
       "                                           cuisine_style  ranking  rating  \\\n",
       "0                ['European', 'French', 'International']   5570.0     3.5   \n",
       "1                                                 [none]   1537.0     4.0   \n",
       "2      ['Japanese', 'Sushi', 'Asian', 'Grill', 'Veget...    353.0     4.5   \n",
       "3                                                 [none]   3458.0     5.0   \n",
       "4      ['German', 'Central European', 'Vegetarian Fri...    621.0     4.0   \n",
       "...                                                  ...      ...     ...   \n",
       "39995  ['Italian', 'Vegetarian Friendly', 'Vegan Opti...    500.0     4.5   \n",
       "39996  ['French', 'American', 'Bar', 'European', 'Veg...   6341.0     3.5   \n",
       "39997                              ['Japanese', 'Sushi']   1652.0     4.5   \n",
       "39998  ['Polish', 'European', 'Eastern European', 'Ce...    641.0     4.0   \n",
       "39999                                        ['Spanish']   4827.0     3.0   \n",
       "\n",
       "       price_range    nor                                            reviews  \\\n",
       "0                2  194.0  [['Good food at your doorstep', 'A good hotel ...   \n",
       "1                0   10.0  [['Unique cuisine', 'Delicious Nepalese food']...   \n",
       "2                3  688.0  [['Catch up with friends', 'Not exceptional'],...   \n",
       "3                0    3.0                                           [[], []]   \n",
       "4                2   84.0  [['Best place to try a Bavarian food', 'Nice b...   \n",
       "...            ...    ...                                                ...   \n",
       "39995            2   79.0  [['The real Italian experience!', 'Wonderful f...   \n",
       "39996            2  542.0  [['Parisian atmosphere', 'Bit pricey but inter...   \n",
       "39997            0    4.0  [['Good by swedish standards', 'A hidden jewel...   \n",
       "39998            2   70.0  [['Underground restaurant', 'Oldest Restaurant...   \n",
       "39999            2  260.0  [['Average', 'Nice an informal'], ['01/31/2016...   \n",
       "\n",
       "                                                  url_ta     id_ta  \\\n",
       "0      /Restaurant_Review-g187147-d1912643-Reviews-R_...  d1912643   \n",
       "1      /Restaurant_Review-g189852-d7992032-Reviews-Bu...  d7992032   \n",
       "2      /Restaurant_Review-g186338-d8632781-Reviews-RO...  d8632781   \n",
       "3      /Restaurant_Review-g187323-d1358776-Reviews-Es...  d1358776   \n",
       "4      /Restaurant_Review-g187309-d6864963-Reviews-Au...  d6864963   \n",
       "...                                                  ...       ...   \n",
       "39995  /Restaurant_Review-g187849-d2104414-Reviews-Ro...  d2104414   \n",
       "39996  /Restaurant_Review-g187147-d1800036-Reviews-La...  d1800036   \n",
       "39997  /Restaurant_Review-g189852-d947615-Reviews-Sus...   d947615   \n",
       "39998  /Restaurant_Review-g274856-d1100838-Reviews-Ho...  d1100838   \n",
       "39999  /Restaurant_Review-g187849-d1109020-Reviews-Ta...  d1109020   \n",
       "\n",
       "       cnt_kitchen              reviews_date  \n",
       "0                3  [12/31/2017, 11/20/2017]  \n",
       "1                1  [07/06/2017, 06/19/2016]  \n",
       "2                7  [01/08/2018, 01/06/2018]  \n",
       "3                1                   no_date  \n",
       "4                3  [11/18/2017, 02/19/2017]  \n",
       "...            ...                       ...  \n",
       "39995            4  [12/16/2017, 11/12/2017]  \n",
       "39996            5  [12/21/2017, 12/12/2017]  \n",
       "39997            2  [11/03/2016, 04/12/2008]  \n",
       "39998            5  [07/11/2017, 06/18/2017]  \n",
       "39999            1  [01/31/2016, 07/04/2012]  \n",
       "\n",
       "[40000 rows x 12 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# df = df[['price_range','rating']]\n",
    "# смотрим на преобразованный df\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "restaurant_id       0\n",
       "city                0\n",
       "cuisine_style       0\n",
       "ranking             0\n",
       "rating              0\n",
       "price_range         0\n",
       "nor              2543\n",
       "reviews             0\n",
       "url_ta              0\n",
       "id_ta               0\n",
       "cnt_kitchen         0\n",
       "reviews_date        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# посмотрим на содержание пропусков в столбцах\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# замена пропусков в столбце nor (Number of Reviews)\n",
    "df['nor'].fillna(df['nor'].mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# создаем дополнительный признак - население города исходя из названия города\n",
    "def fill_population(s):\n",
    "    if s == \"Paris\":\n",
    "        return 2.148\n",
    "    elif s == \"Stockholm\":\n",
    "        return 0.976\n",
    "    elif s == \"London\":\n",
    "        return 8.982\n",
    "    elif s == \"Berlin\":\n",
    "        return 3.769\n",
    "    elif s == \"Munich\":\n",
    "        return 1.472\n",
    "    elif s == \"Oporto\":\n",
    "        return 0.214\n",
    "    elif s == \"Milan\":\n",
    "        return 1.352\n",
    "    elif s == \"Bratislava\":\n",
    "        return 0.424\n",
    "    elif s == \"Vienna\":\n",
    "        return 1.897\n",
    "    elif s == \"Rome\":\n",
    "        return 2.873\n",
    "    elif s == \"Barcelona\":\n",
    "        return 5.575\n",
    "    elif s == \"Madrid\":\n",
    "        return 6.642\n",
    "    elif s == \"Dublin\":\n",
    "        return 1.388\n",
    "    elif s == \"Brussels\":\n",
    "        return 0.174\n",
    "    elif s == \"Zurich\":\n",
    "        return 0.403\n",
    "    elif s == \"Warsaw\":\n",
    "        return 1.708\n",
    "    elif s == \"Budapest\":\n",
    "        return 1.752\n",
    "    elif s == \"Copenhagen\":\n",
    "        return 0.603\n",
    "    elif s == \"Amsterdam\":\n",
    "        return 0.823\n",
    "    elif s == \"Lyon\":\n",
    "        return 0.513\n",
    "    elif s == \"Hamburg\":\n",
    "        return 1.845\n",
    "    elif s == \"Lisbon\":\n",
    "        return 0.505\n",
    "    elif s == \"Prague\":\n",
    "        return 1.309\n",
    "    elif s == \"Oslo\":\n",
    "        return 0.681\n",
    "    elif s == \"Helsinki\":\n",
    "        return 0.632\n",
    "    elif s == \"Edinburgh\":\n",
    "        return 0.482\n",
    "    elif s == \"Geneva\":\n",
    "        return 0.5\n",
    "    elif s == \"Ljubljana\":\n",
    "        return 0.28\n",
    "    elif s == \"Athens\":\n",
    "        return 0.664\n",
    "    elif s == \"Luxembourg\":\n",
    "        return 0.614\n",
    "    elif s == \"Krakow\":\n",
    "        return 0.763"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# добавляем новый признак с числовыми значениями в датафрейм\n",
    "df['city_population'] = df['city'].apply(fill_population)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>restaurant_id</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine_style</th>\n",
       "      <th>ranking</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_range</th>\n",
       "      <th>nor</th>\n",
       "      <th>reviews</th>\n",
       "      <th>url_ta</th>\n",
       "      <th>id_ta</th>\n",
       "      <th>cnt_kitchen</th>\n",
       "      <th>reviews_date</th>\n",
       "      <th>city_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>id_5569</td>\n",
       "      <td>Paris</td>\n",
       "      <td>['European', 'French', 'International']</td>\n",
       "      <td>5570.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "      <td>194.0</td>\n",
       "      <td>[['Good food at your doorstep', 'A good hotel ...</td>\n",
       "      <td>/Restaurant_Review-g187147-d1912643-Reviews-R_...</td>\n",
       "      <td>d1912643</td>\n",
       "      <td>3</td>\n",
       "      <td>[12/31/2017, 11/20/2017]</td>\n",
       "      <td>2.148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>id_1535</td>\n",
       "      <td>Stockholm</td>\n",
       "      <td>[none]</td>\n",
       "      <td>1537.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>[['Unique cuisine', 'Delicious Nepalese food']...</td>\n",
       "      <td>/Restaurant_Review-g189852-d7992032-Reviews-Bu...</td>\n",
       "      <td>d7992032</td>\n",
       "      <td>1</td>\n",
       "      <td>[07/06/2017, 06/19/2016]</td>\n",
       "      <td>0.976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>id_352</td>\n",
       "      <td>London</td>\n",
       "      <td>['Japanese', 'Sushi', 'Asian', 'Grill', 'Veget...</td>\n",
       "      <td>353.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "      <td>688.0</td>\n",
       "      <td>[['Catch up with friends', 'Not exceptional'],...</td>\n",
       "      <td>/Restaurant_Review-g186338-d8632781-Reviews-RO...</td>\n",
       "      <td>d8632781</td>\n",
       "      <td>7</td>\n",
       "      <td>[01/08/2018, 01/06/2018]</td>\n",
       "      <td>8.982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>id_3456</td>\n",
       "      <td>Berlin</td>\n",
       "      <td>[none]</td>\n",
       "      <td>3458.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187323-d1358776-Reviews-Es...</td>\n",
       "      <td>d1358776</td>\n",
       "      <td>1</td>\n",
       "      <td>no_date</td>\n",
       "      <td>3.769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>id_615</td>\n",
       "      <td>Munich</td>\n",
       "      <td>['German', 'Central European', 'Vegetarian Fri...</td>\n",
       "      <td>621.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>84.0</td>\n",
       "      <td>[['Best place to try a Bavarian food', 'Nice b...</td>\n",
       "      <td>/Restaurant_Review-g187309-d6864963-Reviews-Au...</td>\n",
       "      <td>d6864963</td>\n",
       "      <td>3</td>\n",
       "      <td>[11/18/2017, 02/19/2017]</td>\n",
       "      <td>1.472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39995</td>\n",
       "      <td>id_499</td>\n",
       "      <td>Milan</td>\n",
       "      <td>['Italian', 'Vegetarian Friendly', 'Vegan Opti...</td>\n",
       "      <td>500.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "      <td>79.0</td>\n",
       "      <td>[['The real Italian experience!', 'Wonderful f...</td>\n",
       "      <td>/Restaurant_Review-g187849-d2104414-Reviews-Ro...</td>\n",
       "      <td>d2104414</td>\n",
       "      <td>4</td>\n",
       "      <td>[12/16/2017, 11/12/2017]</td>\n",
       "      <td>1.352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39996</td>\n",
       "      <td>id_6340</td>\n",
       "      <td>Paris</td>\n",
       "      <td>['French', 'American', 'Bar', 'European', 'Veg...</td>\n",
       "      <td>6341.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "      <td>542.0</td>\n",
       "      <td>[['Parisian atmosphere', 'Bit pricey but inter...</td>\n",
       "      <td>/Restaurant_Review-g187147-d1800036-Reviews-La...</td>\n",
       "      <td>d1800036</td>\n",
       "      <td>5</td>\n",
       "      <td>[12/21/2017, 12/12/2017]</td>\n",
       "      <td>2.148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39997</td>\n",
       "      <td>id_1649</td>\n",
       "      <td>Stockholm</td>\n",
       "      <td>['Japanese', 'Sushi']</td>\n",
       "      <td>1652.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[['Good by swedish standards', 'A hidden jewel...</td>\n",
       "      <td>/Restaurant_Review-g189852-d947615-Reviews-Sus...</td>\n",
       "      <td>d947615</td>\n",
       "      <td>2</td>\n",
       "      <td>[11/03/2016, 04/12/2008]</td>\n",
       "      <td>0.976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39998</td>\n",
       "      <td>id_640</td>\n",
       "      <td>Warsaw</td>\n",
       "      <td>['Polish', 'European', 'Eastern European', 'Ce...</td>\n",
       "      <td>641.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[['Underground restaurant', 'Oldest Restaurant...</td>\n",
       "      <td>/Restaurant_Review-g274856-d1100838-Reviews-Ho...</td>\n",
       "      <td>d1100838</td>\n",
       "      <td>5</td>\n",
       "      <td>[07/11/2017, 06/18/2017]</td>\n",
       "      <td>1.708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39999</td>\n",
       "      <td>id_4824</td>\n",
       "      <td>Milan</td>\n",
       "      <td>['Spanish']</td>\n",
       "      <td>4827.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>260.0</td>\n",
       "      <td>[['Average', 'Nice an informal'], ['01/31/2016...</td>\n",
       "      <td>/Restaurant_Review-g187849-d1109020-Reviews-Ta...</td>\n",
       "      <td>d1109020</td>\n",
       "      <td>1</td>\n",
       "      <td>[01/31/2016, 07/04/2012]</td>\n",
       "      <td>1.352</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40000 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      restaurant_id       city  \\\n",
       "0           id_5569      Paris   \n",
       "1           id_1535  Stockholm   \n",
       "2            id_352     London   \n",
       "3           id_3456     Berlin   \n",
       "4            id_615     Munich   \n",
       "...             ...        ...   \n",
       "39995        id_499      Milan   \n",
       "39996       id_6340      Paris   \n",
       "39997       id_1649  Stockholm   \n",
       "39998        id_640     Warsaw   \n",
       "39999       id_4824      Milan   \n",
       "\n",
       "                                           cuisine_style  ranking  rating  \\\n",
       "0                ['European', 'French', 'International']   5570.0     3.5   \n",
       "1                                                 [none]   1537.0     4.0   \n",
       "2      ['Japanese', 'Sushi', 'Asian', 'Grill', 'Veget...    353.0     4.5   \n",
       "3                                                 [none]   3458.0     5.0   \n",
       "4      ['German', 'Central European', 'Vegetarian Fri...    621.0     4.0   \n",
       "...                                                  ...      ...     ...   \n",
       "39995  ['Italian', 'Vegetarian Friendly', 'Vegan Opti...    500.0     4.5   \n",
       "39996  ['French', 'American', 'Bar', 'European', 'Veg...   6341.0     3.5   \n",
       "39997                              ['Japanese', 'Sushi']   1652.0     4.5   \n",
       "39998  ['Polish', 'European', 'Eastern European', 'Ce...    641.0     4.0   \n",
       "39999                                        ['Spanish']   4827.0     3.0   \n",
       "\n",
       "       price_range    nor                                            reviews  \\\n",
       "0                2  194.0  [['Good food at your doorstep', 'A good hotel ...   \n",
       "1                0   10.0  [['Unique cuisine', 'Delicious Nepalese food']...   \n",
       "2                3  688.0  [['Catch up with friends', 'Not exceptional'],...   \n",
       "3                0    3.0                                           [[], []]   \n",
       "4                2   84.0  [['Best place to try a Bavarian food', 'Nice b...   \n",
       "...            ...    ...                                                ...   \n",
       "39995            2   79.0  [['The real Italian experience!', 'Wonderful f...   \n",
       "39996            2  542.0  [['Parisian atmosphere', 'Bit pricey but inter...   \n",
       "39997            0    4.0  [['Good by swedish standards', 'A hidden jewel...   \n",
       "39998            2   70.0  [['Underground restaurant', 'Oldest Restaurant...   \n",
       "39999            2  260.0  [['Average', 'Nice an informal'], ['01/31/2016...   \n",
       "\n",
       "                                                  url_ta     id_ta  \\\n",
       "0      /Restaurant_Review-g187147-d1912643-Reviews-R_...  d1912643   \n",
       "1      /Restaurant_Review-g189852-d7992032-Reviews-Bu...  d7992032   \n",
       "2      /Restaurant_Review-g186338-d8632781-Reviews-RO...  d8632781   \n",
       "3      /Restaurant_Review-g187323-d1358776-Reviews-Es...  d1358776   \n",
       "4      /Restaurant_Review-g187309-d6864963-Reviews-Au...  d6864963   \n",
       "...                                                  ...       ...   \n",
       "39995  /Restaurant_Review-g187849-d2104414-Reviews-Ro...  d2104414   \n",
       "39996  /Restaurant_Review-g187147-d1800036-Reviews-La...  d1800036   \n",
       "39997  /Restaurant_Review-g189852-d947615-Reviews-Sus...   d947615   \n",
       "39998  /Restaurant_Review-g274856-d1100838-Reviews-Ho...  d1100838   \n",
       "39999  /Restaurant_Review-g187849-d1109020-Reviews-Ta...  d1109020   \n",
       "\n",
       "       cnt_kitchen              reviews_date  city_population  \n",
       "0                3  [12/31/2017, 11/20/2017]            2.148  \n",
       "1                1  [07/06/2017, 06/19/2016]            0.976  \n",
       "2                7  [01/08/2018, 01/06/2018]            8.982  \n",
       "3                1                   no_date            3.769  \n",
       "4                3  [11/18/2017, 02/19/2017]            1.472  \n",
       "...            ...                       ...              ...  \n",
       "39995            4  [12/16/2017, 11/12/2017]            1.352  \n",
       "39996            5  [12/21/2017, 12/12/2017]            2.148  \n",
       "39997            2  [11/03/2016, 04/12/2008]            0.976  \n",
       "39998            5  [07/11/2017, 06/18/2017]            1.708  \n",
       "39999            1  [01/31/2016, 07/04/2012]            1.352  \n",
       "\n",
       "[40000 rows x 13 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ranking</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_range</th>\n",
       "      <th>nor</th>\n",
       "      <th>cnt_kitchen</th>\n",
       "      <th>city_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>ranking</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.368371</td>\n",
       "      <td>-0.243553</td>\n",
       "      <td>-0.213312</td>\n",
       "      <td>-0.320250</td>\n",
       "      <td>0.545016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>rating</td>\n",
       "      <td>-0.368371</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.051643</td>\n",
       "      <td>0.027969</td>\n",
       "      <td>0.120059</td>\n",
       "      <td>-0.051460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>price_range</td>\n",
       "      <td>-0.243553</td>\n",
       "      <td>0.051643</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.288053</td>\n",
       "      <td>0.565227</td>\n",
       "      <td>0.015147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>nor</td>\n",
       "      <td>-0.213312</td>\n",
       "      <td>0.027969</td>\n",
       "      <td>0.288053</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.389268</td>\n",
       "      <td>0.015680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>cnt_kitchen</td>\n",
       "      <td>-0.320250</td>\n",
       "      <td>0.120059</td>\n",
       "      <td>0.565227</td>\n",
       "      <td>0.389268</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.018624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>city_population</td>\n",
       "      <td>0.545016</td>\n",
       "      <td>-0.051460</td>\n",
       "      <td>0.015147</td>\n",
       "      <td>0.015680</td>\n",
       "      <td>0.018624</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ranking    rating  price_range       nor  cnt_kitchen  \\\n",
       "ranking          1.000000 -0.368371    -0.243553 -0.213312    -0.320250   \n",
       "rating          -0.368371  1.000000     0.051643  0.027969     0.120059   \n",
       "price_range     -0.243553  0.051643     1.000000  0.288053     0.565227   \n",
       "nor             -0.213312  0.027969     0.288053  1.000000     0.389268   \n",
       "cnt_kitchen     -0.320250  0.120059     0.565227  0.389268     1.000000   \n",
       "city_population  0.545016 -0.051460     0.015147  0.015680     0.018624   \n",
       "\n",
       "                 city_population  \n",
       "ranking                 0.545016  \n",
       "rating                 -0.051460  \n",
       "price_range             0.015147  \n",
       "nor                     0.015680  \n",
       "cnt_kitchen             0.018624  \n",
       "city_population         1.000000  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Выводим матрицу корреляций для числовых признаков\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x175b6190e88>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Визуализируем корреляции для числовых признаков\n",
    "sns.heatmap(df.corr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x175b5b4dc48>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Визуализируем корреляции для числовых признаков\n",
    "sns.heatmap(df.corr(), vmin=0, vmax=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Чем светлее окраска, тем болшее влияние оказывают факторы. Визуализация ярко демнстрирует нам значительное влияние таких признаков как city_population(население города), ranking (место, которое занимает ресторан среди ресторанов города), price_range (диапазон цен),cnt_kitchen(количество кухонь представленных в ресторане)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Х - данные с информацией о ресторанах, у - целевая переменная (рейтинги ресторанов)\n",
    "# применяем для модели 5 числовых признаков, кототрые оказывают влияние на целевую переменную.\n",
    "X = df[['price_range','cnt_kitchen','ranking','nor','city_population']]\n",
    "y = df['rating']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Загружаем специальный инструмент для разбивки:\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Наборы данных с меткой \"train\" будут использоваться для обучения модели, \"test\" - для тестирования.\n",
    "# Для тестирования мы будем использовать 25% от исходного датасета.\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Создаём, обучаем и тестируем модель"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Импортируем необходимые библиотеки:\n",
    "from sklearn.ensemble import RandomForestRegressor # инструмент для создания и обучения модели\n",
    "from sklearn import metrics # инструменты для оценки точности модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Создаём модель\n",
    "regr = RandomForestRegressor(n_estimators=100)\n",
    "\n",
    "# Обучаем модель на тестовом наборе данных\n",
    "regr.fit(X_train, y_train)\n",
    "\n",
    "# Используем обученную модель для предсказания рейтинга ресторанов в тестовой выборке.\n",
    "# Предсказанные значения записываем в переменную y_pred\n",
    "y_pred = regr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.219545\n"
     ]
    }
   ],
   "source": [
    "# Сравниваем предсказанные значения (y_pred) с реальными (y_test), и смотрим насколько они в среднем отличаются\n",
    "# Метрика называется Mean Absolute Error (MAE) и показывает среднее отклонение предсказанных значений от фактических.\n",
    "print('MAE:', metrics.mean_absolute_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MAE 0.22 означает, что среднее отклонение предсказанных моделью значений от фактических составляет 22%"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
